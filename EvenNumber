
package ru.savimar.EvenNumber;

import java.util.*;

public class EvenNumber {
    public static int[] getEvenNumbersByChars(String str) {
        if (str.isEmpty() || str == null) {
            return new int[0];
        }
        char[] chars = str.toCharArray();
        int[] numbers = new int[str.length()];
        StringBuilder s = new StringBuilder();

        int size = chars.length;
        int count = 0;
        for (int i = 0; i <= size; i++) {
            if (i == size || chars[i] == ';') {
                int num = Integer.parseInt(s.toString());
                if (num % 2 == 0) {
                    numbers[count] = num;
                    count++;
                }
                s = new StringBuilder();

            } else {
                s.append(chars[i]);
            }
        }
        int[] arr = Arrays.copyOf(numbers, count);
        Arrays.sort(arr);
        return arr;
    }

    public static int[] getEvenNumbersBySplit(String str) {
        if (str.isEmpty() || str == null) {
            return new int[0];
        }
        String[] array = str.split(";");
        int[] numbers = new int[array.length];
        int count = 0;
        for (String s : array) {
            int num = Integer.parseInt(s.toString());
            if (num % 2 == 0) {
                numbers[count] = num;
                count++;
            }

        }
        int[] arr = Arrays.copyOf(numbers, count);
        Arrays.sort(arr);
        return arr;
    }

    public static int[] getEvenNumbersByStringTokenizer(String str) {
        if (str.isEmpty() || str == null) {
            return new int[0];
        }
        StringTokenizer token = new StringTokenizer(str, ";");
        int[] numbers = new int[token.countTokens()];
        int count = 0;
        while (token.hasMoreTokens()) {
            int num = Integer.parseInt(token.nextToken());
            if (num % 2 == 0) {
                numbers[count] = num;
                count++;
            }
        }
        int[] arr = Arrays.copyOf(numbers, count);
        Arrays.sort(arr);
        return arr;
    }

    public static int[] readString(String str) {

        if (str.isEmpty() || str == null) {
            return new int[0];
        }

        List<Integer> numbers = new ArrayList<>();
        char[] array = str.toCharArray();

        char previous = ' ';
        StringBuffer accumulatedNumber = new StringBuffer();
        for (int i = 0; i < array.length; i++) {
            char current = array[i];

            if (current == ';' || i == array.length - 1) {
                if (i > 0 && current == ';') {
                    previous = array[i - 1];
                } else if (i == array.length - 1) {
                    // special handling for the last number
                    previous = array[i];
                    accumulatedNumber.append(previous);
                }
                switch (previous) {
                    case '0':
                    case '2':
                    case '4':
                    case '6':
                    case '8':                       
                        try {
                            Integer num = Integer.valueOf(accumulatedNumber.toString());
                            numbers.add(num);
                        } catch (NumberFormatException nfe) {
                          
                        }

                        break;
                    default:
                        break;
                }
                accumulatedNumber = new StringBuffer();
            } else {
                accumulatedNumber.append(current);
            }
        }

        Collections.sort(numbers);
        int[] arrayOfIntegers = new int[numbers.size()];
        for (int i = 0; i < numbers.size(); i++) {
            arrayOfIntegers[i] = numbers.get(i);
        }
        return arrayOfIntegers;
    }
    public static int[] readStringByChar(String str) {
        if (str.isEmpty() || str == null) {
            return new int[0];
        }
        char[] chars = str.toCharArray();
        int[] numbers = new int[str.length()];
        StringBuilder accumulatedNumber = new StringBuilder();
        char previous = ' ';


        int size = chars.length;
        int count = 0;
        for (int i = 0; i <= size; i++) {
            if (i == size || chars[i] == ';') {
              previous= chars[i-1];
                switch (previous) {
                    case '0':
                    case '2':
                    case '4':
                    case '6':
                    case '8':

                        try {
                            Integer num = Integer.valueOf(accumulatedNumber.toString());
                            numbers[count]=num;
                            count++;
                        } catch (NumberFormatException nfe) {
                            nfe.getStackTrace();
                        }
                       break;
                    default:
                        break;
                }
                accumulatedNumber = new StringBuilder();

            } else {
                accumulatedNumber.append(chars[i]);
            }
        }
        int[] arr = Arrays.copyOf(numbers, count);
        Arrays.sort(arr);
        return arr;
    }

    }


